/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jsr.jsk.prpe.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-18")
public class OpenFileRequest implements org.apache.thrift.TBase<OpenFileRequest, OpenFileRequest._Fields>, java.io.Serializable, Cloneable, Comparable<OpenFileRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenFileRequest");

  private static final org.apache.thrift.protocol.TField REQUESTTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requesttype", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("filesize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGEBUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("storagebudget", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenFileRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenFileRequestTupleSchemeFactory();

  public int requesttype; // required
  public java.lang.String filename; // required
  public int filesize; // required
  public double storagebudget; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUESTTYPE((short)1, "requesttype"),
    FILENAME((short)2, "filename"),
    FILESIZE((short)3, "filesize"),
    STORAGEBUDGET((short)4, "storagebudget");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUESTTYPE
          return REQUESTTYPE;
        case 2: // FILENAME
          return FILENAME;
        case 3: // FILESIZE
          return FILESIZE;
        case 4: // STORAGEBUDGET
          return STORAGEBUDGET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTTYPE_ISSET_ID = 0;
  private static final int __FILESIZE_ISSET_ID = 1;
  private static final int __STORAGEBUDGET_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUESTTYPE, new org.apache.thrift.meta_data.FieldMetaData("requesttype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int32")));
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILESIZE, new org.apache.thrift.meta_data.FieldMetaData("filesize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int32")));
    tmpMap.put(_Fields.STORAGEBUDGET, new org.apache.thrift.meta_data.FieldMetaData("storagebudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenFileRequest.class, metaDataMap);
  }

  public OpenFileRequest() {
  }

  public OpenFileRequest(
    int requesttype,
    java.lang.String filename,
    int filesize,
    double storagebudget)
  {
    this();
    this.requesttype = requesttype;
    setRequesttypeIsSet(true);
    this.filename = filename;
    this.filesize = filesize;
    setFilesizeIsSet(true);
    this.storagebudget = storagebudget;
    setStoragebudgetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpenFileRequest(OpenFileRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requesttype = other.requesttype;
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    this.filesize = other.filesize;
    this.storagebudget = other.storagebudget;
  }

  public OpenFileRequest deepCopy() {
    return new OpenFileRequest(this);
  }

  @Override
  public void clear() {
    setRequesttypeIsSet(false);
    this.requesttype = 0;
    this.filename = null;
    setFilesizeIsSet(false);
    this.filesize = 0;
    setStoragebudgetIsSet(false);
    this.storagebudget = 0.0;
  }

  public int getRequesttype() {
    return this.requesttype;
  }

  public OpenFileRequest setRequesttype(int requesttype) {
    this.requesttype = requesttype;
    setRequesttypeIsSet(true);
    return this;
  }

  public void unsetRequesttype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTTYPE_ISSET_ID);
  }

  /** Returns true if field requesttype is set (has been assigned a value) and false otherwise */
  public boolean isSetRequesttype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTTYPE_ISSET_ID);
  }

  public void setRequesttypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTTYPE_ISSET_ID, value);
  }

  public java.lang.String getFilename() {
    return this.filename;
  }

  public OpenFileRequest setFilename(java.lang.String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public int getFilesize() {
    return this.filesize;
  }

  public OpenFileRequest setFilesize(int filesize) {
    this.filesize = filesize;
    setFilesizeIsSet(true);
    return this;
  }

  public void unsetFilesize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field filesize is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFilesizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public double getStoragebudget() {
    return this.storagebudget;
  }

  public OpenFileRequest setStoragebudget(double storagebudget) {
    this.storagebudget = storagebudget;
    setStoragebudgetIsSet(true);
    return this;
  }

  public void unsetStoragebudget() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STORAGEBUDGET_ISSET_ID);
  }

  /** Returns true if field storagebudget is set (has been assigned a value) and false otherwise */
  public boolean isSetStoragebudget() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STORAGEBUDGET_ISSET_ID);
  }

  public void setStoragebudgetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STORAGEBUDGET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case REQUESTTYPE:
      if (value == null) {
        unsetRequesttype();
      } else {
        setRequesttype((java.lang.Integer)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((java.lang.String)value);
      }
      break;

    case FILESIZE:
      if (value == null) {
        unsetFilesize();
      } else {
        setFilesize((java.lang.Integer)value);
      }
      break;

    case STORAGEBUDGET:
      if (value == null) {
        unsetStoragebudget();
      } else {
        setStoragebudget((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUESTTYPE:
      return getRequesttype();

    case FILENAME:
      return getFilename();

    case FILESIZE:
      return getFilesize();

    case STORAGEBUDGET:
      return getStoragebudget();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUESTTYPE:
      return isSetRequesttype();
    case FILENAME:
      return isSetFilename();
    case FILESIZE:
      return isSetFilesize();
    case STORAGEBUDGET:
      return isSetStoragebudget();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OpenFileRequest)
      return this.equals((OpenFileRequest)that);
    return false;
  }

  public boolean equals(OpenFileRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requesttype = true;
    boolean that_present_requesttype = true;
    if (this_present_requesttype || that_present_requesttype) {
      if (!(this_present_requesttype && that_present_requesttype))
        return false;
      if (this.requesttype != that.requesttype)
        return false;
    }

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    boolean this_present_filesize = true;
    boolean that_present_filesize = true;
    if (this_present_filesize || that_present_filesize) {
      if (!(this_present_filesize && that_present_filesize))
        return false;
      if (this.filesize != that.filesize)
        return false;
    }

    boolean this_present_storagebudget = true;
    boolean that_present_storagebudget = true;
    if (this_present_storagebudget || that_present_storagebudget) {
      if (!(this_present_storagebudget && that_present_storagebudget))
        return false;
      if (this.storagebudget != that.storagebudget)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + requesttype;

    hashCode = hashCode * 8191 + ((isSetFilename()) ? 131071 : 524287);
    if (isSetFilename())
      hashCode = hashCode * 8191 + filename.hashCode();

    hashCode = hashCode * 8191 + filesize;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(storagebudget);

    return hashCode;
  }

  @Override
  public int compareTo(OpenFileRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequesttype()).compareTo(other.isSetRequesttype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequesttype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesttype, other.requesttype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFilesize()).compareTo(other.isSetFilesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesize, other.filesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoragebudget()).compareTo(other.isSetStoragebudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoragebudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storagebudget, other.storagebudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenFileRequest(");
    boolean first = true;

    sb.append("requesttype:");
    sb.append(this.requesttype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filename:");
    if (this.filename == null) {
      sb.append("null");
    } else {
      sb.append(this.filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filesize:");
    sb.append(this.filesize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storagebudget:");
    sb.append(this.storagebudget);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'requesttype' because it's a primitive and you chose the non-beans generator.
    if (filename == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filename' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'filesize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'storagebudget' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpenFileRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OpenFileRequestStandardScheme getScheme() {
      return new OpenFileRequestStandardScheme();
    }
  }

  private static class OpenFileRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenFileRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OpenFileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUESTTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requesttype = iprot.readI32();
              struct.setRequesttypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filesize = iprot.readI32();
              struct.setFilesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGEBUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.storagebudget = iprot.readDouble();
              struct.setStoragebudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRequesttype()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requesttype' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFilesize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filesize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStoragebudget()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'storagebudget' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OpenFileRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUESTTYPE_FIELD_DESC);
      oprot.writeI32(struct.requesttype);
      oprot.writeFieldEnd();
      if (struct.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.filename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILESIZE_FIELD_DESC);
      oprot.writeI32(struct.filesize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORAGEBUDGET_FIELD_DESC);
      oprot.writeDouble(struct.storagebudget);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OpenFileRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OpenFileRequestTupleScheme getScheme() {
      return new OpenFileRequestTupleScheme();
    }
  }

  private static class OpenFileRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenFileRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OpenFileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.requesttype);
      oprot.writeString(struct.filename);
      oprot.writeI32(struct.filesize);
      oprot.writeDouble(struct.storagebudget);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OpenFileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.requesttype = iprot.readI32();
      struct.setRequesttypeIsSet(true);
      struct.filename = iprot.readString();
      struct.setFilenameIsSet(true);
      struct.filesize = iprot.readI32();
      struct.setFilesizeIsSet(true);
      struct.storagebudget = iprot.readDouble();
      struct.setStoragebudgetIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

