/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jsr.jsk.prpe.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-18")
public class ReadBlockResponse implements org.apache.thrift.TBase<ReadBlockResponse, ReadBlockResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ReadBlockResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadBlockResponse");

  private static final org.apache.thrift.protocol.TField BLOCKLOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklocations", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReadBlockResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReadBlockResponseTupleSchemeFactory();

  public java.util.List<BlockLocation> blocklocations; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCKLOCATIONS((short)1, "blocklocations"),
    STATUS((short)2, "status");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCKLOCATIONS
          return BLOCKLOCATIONS;
        case 2: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCKLOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("blocklocations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockLocation.class))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int32")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadBlockResponse.class, metaDataMap);
  }

  public ReadBlockResponse() {
  }

  public ReadBlockResponse(
    java.util.List<BlockLocation> blocklocations,
    int status)
  {
    this();
    this.blocklocations = blocklocations;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReadBlockResponse(ReadBlockResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBlocklocations()) {
      java.util.List<BlockLocation> __this__blocklocations = new java.util.ArrayList<BlockLocation>(other.blocklocations.size());
      for (BlockLocation other_element : other.blocklocations) {
        __this__blocklocations.add(new BlockLocation(other_element));
      }
      this.blocklocations = __this__blocklocations;
    }
    this.status = other.status;
  }

  public ReadBlockResponse deepCopy() {
    return new ReadBlockResponse(this);
  }

  @Override
  public void clear() {
    this.blocklocations = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getBlocklocationsSize() {
    return (this.blocklocations == null) ? 0 : this.blocklocations.size();
  }

  public java.util.Iterator<BlockLocation> getBlocklocationsIterator() {
    return (this.blocklocations == null) ? null : this.blocklocations.iterator();
  }

  public void addToBlocklocations(BlockLocation elem) {
    if (this.blocklocations == null) {
      this.blocklocations = new java.util.ArrayList<BlockLocation>();
    }
    this.blocklocations.add(elem);
  }

  public java.util.List<BlockLocation> getBlocklocations() {
    return this.blocklocations;
  }

  public ReadBlockResponse setBlocklocations(java.util.List<BlockLocation> blocklocations) {
    this.blocklocations = blocklocations;
    return this;
  }

  public void unsetBlocklocations() {
    this.blocklocations = null;
  }

  /** Returns true if field blocklocations is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklocations() {
    return this.blocklocations != null;
  }

  public void setBlocklocationsIsSet(boolean value) {
    if (!value) {
      this.blocklocations = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ReadBlockResponse setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BLOCKLOCATIONS:
      if (value == null) {
        unsetBlocklocations();
      } else {
        setBlocklocations((java.util.List<BlockLocation>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCKLOCATIONS:
      return getBlocklocations();

    case STATUS:
      return getStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BLOCKLOCATIONS:
      return isSetBlocklocations();
    case STATUS:
      return isSetStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReadBlockResponse)
      return this.equals((ReadBlockResponse)that);
    return false;
  }

  public boolean equals(ReadBlockResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_blocklocations = true && this.isSetBlocklocations();
    boolean that_present_blocklocations = true && that.isSetBlocklocations();
    if (this_present_blocklocations || that_present_blocklocations) {
      if (!(this_present_blocklocations && that_present_blocklocations))
        return false;
      if (!this.blocklocations.equals(that.blocklocations))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBlocklocations()) ? 131071 : 524287);
    if (isSetBlocklocations())
      hashCode = hashCode * 8191 + blocklocations.hashCode();

    hashCode = hashCode * 8191 + status;

    return hashCode;
  }

  @Override
  public int compareTo(ReadBlockResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBlocklocations()).compareTo(other.isSetBlocklocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklocations, other.blocklocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReadBlockResponse(");
    boolean first = true;

    sb.append("blocklocations:");
    if (this.blocklocations == null) {
      sb.append("null");
    } else {
      sb.append(this.blocklocations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (blocklocations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklocations' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReadBlockResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReadBlockResponseStandardScheme getScheme() {
      return new ReadBlockResponseStandardScheme();
    }
  }

  private static class ReadBlockResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReadBlockResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReadBlockResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCKLOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.blocklocations = new java.util.ArrayList<BlockLocation>(_list16.size);
                BlockLocation _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new BlockLocation();
                  _elem17.read(iprot);
                  struct.blocklocations.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setBlocklocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReadBlockResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.blocklocations != null) {
        oprot.writeFieldBegin(BLOCKLOCATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blocklocations.size()));
          for (BlockLocation _iter19 : struct.blocklocations)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReadBlockResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReadBlockResponseTupleScheme getScheme() {
      return new ReadBlockResponseTupleScheme();
    }
  }

  private static class ReadBlockResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReadBlockResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReadBlockResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.blocklocations.size());
        for (BlockLocation _iter20 : struct.blocklocations)
        {
          _iter20.write(oprot);
        }
      }
      oprot.writeI32(struct.status);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReadBlockResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.blocklocations = new java.util.ArrayList<BlockLocation>(_list21.size);
        BlockLocation _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new BlockLocation();
          _elem22.read(iprot);
          struct.blocklocations.add(_elem22);
        }
      }
      struct.setBlocklocationsIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

