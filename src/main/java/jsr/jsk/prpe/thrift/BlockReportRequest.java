/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jsr.jsk.prpe.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-22")
public class BlockReportRequest implements org.apache.thrift.TBase<BlockReportRequest, BlockReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BlockReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockReportRequest");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATANODELOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("datanodelocation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BLOCKNUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("blocknumbers", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BlockReportRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BlockReportRequestTupleSchemeFactory();

  public int nodeId; // required
  public DataNodeLocation datanodelocation; // required
  public java.util.List<java.lang.Integer> blocknumbers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    DATANODELOCATION((short)2, "datanodelocation"),
    BLOCKNUMBERS((short)3, "blocknumbers");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // DATANODELOCATION
          return DATANODELOCATION;
        case 3: // BLOCKNUMBERS
          return BLOCKNUMBERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int32")));
    tmpMap.put(_Fields.DATANODELOCATION, new org.apache.thrift.meta_data.FieldMetaData("datanodelocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataNodeLocation.class)));
    tmpMap.put(_Fields.BLOCKNUMBERS, new org.apache.thrift.meta_data.FieldMetaData("blocknumbers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int32"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockReportRequest.class, metaDataMap);
  }

  public BlockReportRequest() {
  }

  public BlockReportRequest(
    int nodeId,
    DataNodeLocation datanodelocation,
    java.util.List<java.lang.Integer> blocknumbers)
  {
    this();
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    this.datanodelocation = datanodelocation;
    this.blocknumbers = blocknumbers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockReportRequest(BlockReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nodeId = other.nodeId;
    if (other.isSetDatanodelocation()) {
      this.datanodelocation = new DataNodeLocation(other.datanodelocation);
    }
    if (other.isSetBlocknumbers()) {
      java.util.List<java.lang.Integer> __this__blocknumbers = new java.util.ArrayList<java.lang.Integer>(other.blocknumbers.size());
      for (java.lang.Integer other_element : other.blocknumbers) {
        __this__blocknumbers.add(other_element);
      }
      this.blocknumbers = __this__blocknumbers;
    }
  }

  public BlockReportRequest deepCopy() {
    return new BlockReportRequest(this);
  }

  @Override
  public void clear() {
    setNodeIdIsSet(false);
    this.nodeId = 0;
    this.datanodelocation = null;
    this.blocknumbers = null;
  }

  public int getNodeId() {
    return this.nodeId;
  }

  public BlockReportRequest setNodeId(int nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
  }

  public DataNodeLocation getDatanodelocation() {
    return this.datanodelocation;
  }

  public BlockReportRequest setDatanodelocation(DataNodeLocation datanodelocation) {
    this.datanodelocation = datanodelocation;
    return this;
  }

  public void unsetDatanodelocation() {
    this.datanodelocation = null;
  }

  /** Returns true if field datanodelocation is set (has been assigned a value) and false otherwise */
  public boolean isSetDatanodelocation() {
    return this.datanodelocation != null;
  }

  public void setDatanodelocationIsSet(boolean value) {
    if (!value) {
      this.datanodelocation = null;
    }
  }

  public int getBlocknumbersSize() {
    return (this.blocknumbers == null) ? 0 : this.blocknumbers.size();
  }

  public java.util.Iterator<java.lang.Integer> getBlocknumbersIterator() {
    return (this.blocknumbers == null) ? null : this.blocknumbers.iterator();
  }

  public void addToBlocknumbers(int elem) {
    if (this.blocknumbers == null) {
      this.blocknumbers = new java.util.ArrayList<java.lang.Integer>();
    }
    this.blocknumbers.add(elem);
  }

  public java.util.List<java.lang.Integer> getBlocknumbers() {
    return this.blocknumbers;
  }

  public BlockReportRequest setBlocknumbers(java.util.List<java.lang.Integer> blocknumbers) {
    this.blocknumbers = blocknumbers;
    return this;
  }

  public void unsetBlocknumbers() {
    this.blocknumbers = null;
  }

  /** Returns true if field blocknumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocknumbers() {
    return this.blocknumbers != null;
  }

  public void setBlocknumbersIsSet(boolean value) {
    if (!value) {
      this.blocknumbers = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.Integer)value);
      }
      break;

    case DATANODELOCATION:
      if (value == null) {
        unsetDatanodelocation();
      } else {
        setDatanodelocation((DataNodeLocation)value);
      }
      break;

    case BLOCKNUMBERS:
      if (value == null) {
        unsetBlocknumbers();
      } else {
        setBlocknumbers((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case DATANODELOCATION:
      return getDatanodelocation();

    case BLOCKNUMBERS:
      return getBlocknumbers();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case DATANODELOCATION:
      return isSetDatanodelocation();
    case BLOCKNUMBERS:
      return isSetBlocknumbers();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockReportRequest)
      return this.equals((BlockReportRequest)that);
    return false;
  }

  public boolean equals(BlockReportRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    boolean this_present_datanodelocation = true && this.isSetDatanodelocation();
    boolean that_present_datanodelocation = true && that.isSetDatanodelocation();
    if (this_present_datanodelocation || that_present_datanodelocation) {
      if (!(this_present_datanodelocation && that_present_datanodelocation))
        return false;
      if (!this.datanodelocation.equals(that.datanodelocation))
        return false;
    }

    boolean this_present_blocknumbers = true && this.isSetBlocknumbers();
    boolean that_present_blocknumbers = true && that.isSetBlocknumbers();
    if (this_present_blocknumbers || that_present_blocknumbers) {
      if (!(this_present_blocknumbers && that_present_blocknumbers))
        return false;
      if (!this.blocknumbers.equals(that.blocknumbers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + nodeId;

    hashCode = hashCode * 8191 + ((isSetDatanodelocation()) ? 131071 : 524287);
    if (isSetDatanodelocation())
      hashCode = hashCode * 8191 + datanodelocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetBlocknumbers()) ? 131071 : 524287);
    if (isSetBlocknumbers())
      hashCode = hashCode * 8191 + blocknumbers.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BlockReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatanodelocation()).compareTo(other.isSetDatanodelocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatanodelocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datanodelocation, other.datanodelocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlocknumbers()).compareTo(other.isSetBlocknumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocknumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocknumbers, other.blocknumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BlockReportRequest(");
    boolean first = true;

    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datanodelocation:");
    if (this.datanodelocation == null) {
      sb.append("null");
    } else {
      sb.append(this.datanodelocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocknumbers:");
    if (this.blocknumbers == null) {
      sb.append("null");
    } else {
      sb.append(this.blocknumbers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'nodeId' because it's a primitive and you chose the non-beans generator.
    if (datanodelocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datanodelocation' was not present! Struct: " + toString());
    }
    if (blocknumbers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocknumbers' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (datanodelocation != null) {
      datanodelocation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockReportRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlockReportRequestStandardScheme getScheme() {
      return new BlockReportRequestStandardScheme();
    }
  }

  private static class BlockReportRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<BlockReportRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeId = iprot.readI32();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATANODELOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.datanodelocation = new DataNodeLocation();
              struct.datanodelocation.read(iprot);
              struct.setDatanodelocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOCKNUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.blocknumbers = new java.util.ArrayList<java.lang.Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.blocknumbers.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setBlocknumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNodeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.nodeId);
      oprot.writeFieldEnd();
      if (struct.datanodelocation != null) {
        oprot.writeFieldBegin(DATANODELOCATION_FIELD_DESC);
        struct.datanodelocation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blocknumbers != null) {
        oprot.writeFieldBegin(BLOCKNUMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.blocknumbers.size()));
          for (int _iter35 : struct.blocknumbers)
          {
            oprot.writeI32(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockReportRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlockReportRequestTupleScheme getScheme() {
      return new BlockReportRequestTupleScheme();
    }
  }

  private static class BlockReportRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<BlockReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.nodeId);
      struct.datanodelocation.write(oprot);
      {
        oprot.writeI32(struct.blocknumbers.size());
        for (int _iter36 : struct.blocknumbers)
        {
          oprot.writeI32(_iter36);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readI32();
      struct.setNodeIdIsSet(true);
      struct.datanodelocation = new DataNodeLocation();
      struct.datanodelocation.read(iprot);
      struct.setDatanodelocationIsSet(true);
      {
        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.blocknumbers = new java.util.ArrayList<java.lang.Integer>(_list37.size);
        int _elem38;
        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
        {
          _elem38 = iprot.readI32();
          struct.blocknumbers.add(_elem38);
        }
      }
      struct.setBlocknumbersIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

